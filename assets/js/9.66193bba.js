(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{197:function(n,e,s){"use strict";s.r(e);var t=s(3),a=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"basic-configs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic-configs"}},[this._v("#")]),this._v(" basic configs")]),this._v(" "),e("blockquote",[e("p",[this._v("Here we use json with comments for documentation")])]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('{\n  // clickhouse configs, it\'s map[string]ClickHouse for multiple clickhouse\n  "clickhouse": {\n    // key for clickhouse config\n    "ch1": {\n      "db": "default",  // database name\n\n      // hosts for connection, it\'s Array(Array(String))\n      // we can put hosts with same shard into the inner array\n      // it helps data deduplication for ReplicateMergeTree when driver error occurs\n      "hosts": [\n        [\n          "127.0.0.1"\n        ]\n      ],\n      "password": "",\n      // retryTimes when error occurs in inserting datas\n      "retryTimes": 0,\n      "port": 9000,\n      "username": "default"\n    }\n  },\n\n  // kafka configs\n  "kafka": {\n    "kfk1": {\n      "brokers": "127.0.0.1:9093",\n\n      // somethings about sasl\n      "sasl": {\n        "enable": false,\n        "password": "",\n        "username": "",\n        "gssapi": {\n          "authtype": 0,\n          "keytabpath": "",\n          "kerberosconfigpath": "",\n          "servicename": "",\n          "username": "",\n          "password": "",\n          "realm": "",\n          "disablepafxfast": false\n        }\n      },\n\n      // kafka version, if you use sarama, the version must be specified\n      "version": "2.2.1"\n    }\n  },\n\n  "common": {\n    // batch size to insert into clickhouse\n    "bufferSize": 90000,\n    // min batch size to insert into clickhouse\n    "minBufferSize": 1,\n\n    // msg bytes per message\n    "msgSizeHint": 1000,\n\n    // interval flush the batch\n    "flushInterval": 5,\n\n    // log level\n    "logLevel": "debug"\n  }\n}\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);